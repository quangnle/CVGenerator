ts-loader: Using typescript@2.3.2 and D:\Git\CVGenerator\tsconfig.json
{
  "errors": [],
  "warnings": [],
  "version": "2.4.1",
  "hash": "48bef30d84acb93f28e1",
  "time": 1691,
  "publicPath": "",
  "assetsByChunkName": {
    "app": "./dist/app.bundle.js",
    "theme": "./dist/theme.bundle.js"
  },
  "assets": [
    {
      "name": "./dist/app.bundle.js",
      "size": 66417,
      "chunks": [
        0
      ],
      "chunkNames": [
        "app"
      ],
      "emitted": true
    },
    {
      "name": "./dist/theme.bundle.js",
      "size": 11503,
      "chunks": [
        1
      ],
      "chunkNames": [
        "theme"
      ],
      "emitted": true
    }
  ],
  "entrypoints": {
    "app": {
      "chunks": [
        0
      ],
      "assets": [
        "./dist/app.bundle.js"
      ]
    },
    "theme": {
      "chunks": [
        1
      ],
      "assets": [
        "./dist/theme.bundle.js"
      ]
    }
  },
  "chunks": [
    {
      "id": 0,
      "rendered": true,
      "initial": true,
      "entry": true,
      "extraAsync": false,
      "size": 40585,
      "names": [
        "app"
      ],
      "files": [
        "./dist/app.bundle.js"
      ],
      "hash": "ee8dd41228cfa7e89148",
      "parents": [],
      "modules": [
        {
          "id": 1,
          "identifier": "D:\\Git\\CVGenerator\\node_modules\\ts-loader\\index.js!D:\\Git\\CVGenerator\\app\\app.module.ts",
          "name": "./app/app.module.ts",
          "index": 0,
          "index2": 0,
          "size": 40585,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": null,
          "issuerId": null,
          "issuerName": null,
          "profile": {
            "factory": 46,
            "building": 1113
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [],
          "usedExports": true,
          "providedExports": null,
          "depth": 0,
          "source": "/// <reference path=\"../references.ts\" />\r\n'use strict';\r\nvar CVGen;\r\n(function (CVGen) {\r\n    var Base;\r\n    (function (Base) {\r\n        Base.UserToken = userToken;\r\n        var Const = (function () {\r\n            function Const() {\r\n            }\r\n            Object.defineProperty(Const, \"USER_TOKEN\", {\r\n                get: function () {\r\n                    return Base.UserToken;\r\n                },\r\n                set: function (token) {\r\n                    Base.UserToken = token;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n            return Const;\r\n        }());\r\n        Base.Const = Const;\r\n    })(Base = CVGen.Base || (CVGen.Base = {}));\r\n})(CVGen || (CVGen = {}));\r\nvar CVGen;\r\n(function (CVGen) {\r\n    var Controller;\r\n    (function (Controller) {\r\n        var Home = (function () {\r\n            function Home() {\r\n            }\r\n            //public static $inject = ['$scope', '$filter', '$location'];\r\n            Home.Configure = function (module) {\r\n                module.controller('HomeCtrl', function () {\r\n                });\r\n            };\r\n            return Home;\r\n        }());\r\n        Controller.Home = Home;\r\n    })(Controller = CVGen.Controller || (CVGen.Controller = {}));\r\n})(CVGen || (CVGen = {}));\r\nvar CVGen;\r\n(function (CVGen) {\r\n    var Controller;\r\n    (function (Controller) {\r\n        var Resume = (function () {\r\n            function Resume() {\r\n            }\r\n            Resume.Configure = function (module) {\r\n                module.controller('ResumeCtrl', function ($scope, templateService) {\r\n                    $scope.InitViewProfile = function (data) {\r\n                        templateService.GetAll()\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                $scope.Templates = response.data;\r\n                            }\r\n                        });\r\n                    };\r\n                });\r\n            };\r\n            return Resume;\r\n        }());\r\n        Resume.$inject = ['$scope', 'templateService'];\r\n        Controller.Resume = Resume;\r\n    })(Controller = CVGen.Controller || (CVGen.Controller = {}));\r\n})(CVGen || (CVGen = {}));\r\nvar CVGen;\r\n(function (CVGen) {\r\n    var Controller;\r\n    (function (Controller) {\r\n        var UserResume = (function () {\r\n            function UserResume() {\r\n            }\r\n            UserResume.Configure = function (module) {\r\n                module.controller('UserResumeCtrl', function ($scope, templateService) {\r\n                    $scope.InitViewUserProfile = function (data) {\r\n                        $scope.TemplateSrc = data.Template.TemplateSrc;\r\n                        $scope.TemplateSrcIndex = data.Template.TemplateSrc + 'index.html';\r\n                        $scope.PersonalInformation = data.PersonalInformation;\r\n                        $scope.Educations = data.Educations;\r\n                        $scope.WorkExps = data.WorkExps;\r\n                        for (var i = 0; i < $scope.WorkExps.length; i++) {\r\n                            var work = $scope.WorkExps[i];\r\n                            work.DescLines = work.Description.split(/\\r?\\n/);\r\n                        }\r\n                        $scope.Skills = data.Skills;\r\n                        $scope.References = data.References;\r\n                        $scope.Title = data.PersonalInformation.FirstName + \" \" + data.PersonalInformation.LastName + \" - Curriculum Vitae\";\r\n                    };\r\n                    $scope.InitViewMyCvs = function (data) {\r\n                        $scope.AccountInfo = {};\r\n                        $scope.AccountInfo.UserEmail = data.UserEmail;\r\n                        $scope.PersonalInformations = data.PersonalInformations;\r\n                    };\r\n                    $scope.ExportMyCv = function () {\r\n                        html2canvas(document.body, {\r\n                            onrendered: function (canvas) {\r\n                                var data = canvas.toDataURL();\r\n                                var docDefinition = {\r\n                                    content: [{\r\n                                            image: data,\r\n                                            width: 500,\r\n                                        }]\r\n                                };\r\n                                pdfMake.createPdf(docDefinition).download($scope.Title + \".pdf\");\r\n                            }\r\n                        });\r\n                    };\r\n                    $scope.GetRangeTime = function (fromM, fromY, toM, toY) {\r\n                        var result = UserResume.MonthArray[fromM - 1];\r\n                        result = result.concat(\" \", fromY, \" - \");\r\n                        if (toM == null || toY == null) {\r\n                            result = result.concat(\"present\");\r\n                        }\r\n                        else {\r\n                            result = result.concat(UserResume.MonthArray[toM - 1], \" \", toY);\r\n                        }\r\n                        return result;\r\n                    };\r\n                });\r\n            };\r\n            return UserResume;\r\n        }());\r\n        UserResume.$inject = ['$scope', 'templateService'];\r\n        UserResume.MonthArray = ['January',\r\n            'February',\r\n            'March',\r\n            'April',\r\n            'May',\r\n            'June',\r\n            'July',\r\n            'August',\r\n            'September',\r\n            'October',\r\n            'November',\r\n            'December'];\r\n        Controller.UserResume = UserResume;\r\n    })(Controller = CVGen.Controller || (CVGen.Controller = {}));\r\n})(CVGen || (CVGen = {}));\r\nvar CVGen;\r\n(function (CVGen) {\r\n    var Controller;\r\n    (function (Controller) {\r\n        var Profile = (function () {\r\n            function Profile() {\r\n            }\r\n            Profile.Configure = function (module) {\r\n                module.controller('ProfileCtrl', function ($scope, $location, logger, profileService, skillService, workExpService, referenceService, uploadService) {\r\n                    $scope.InitCreateProfile = function () {\r\n                        $scope.myImage = '';\r\n                        $scope.myCroppedImage = '';\r\n                        $scope.steps = [\r\n                            'personalInformation',\r\n                            'education',\r\n                            'workExperience',\r\n                            'skill',\r\n                            'reference'\r\n                        ];\r\n                        $scope.step = $scope.steps[0];\r\n                        $scope.ProfileId = null;\r\n                        $scope.Profile = {};\r\n                        $scope.Educations = [];\r\n                        $scope.Skills = [];\r\n                        $scope.References = [];\r\n                        $scope.WorkExps = [];\r\n                        var tokens = $location.$$absUrl.split(\"/\");\r\n                        var id = \"\";\r\n                        var regexGuid = /^(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}$/gi;\r\n                        for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\r\n                            var token = tokens_1[_i];\r\n                            var isGuid = regexGuid.test(token);\r\n                            if (isGuid) {\r\n                                id = token;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (id != null && id.length > 0) {\r\n                            //update\r\n                            profileService.GetProfile(id)\r\n                                .then(function (response) {\r\n                                if (response.status == 200) {\r\n                                    var res = response.data;\r\n                                    $scope.ProfileId = res.PersonalInformation.Id;\r\n                                    $scope.ProfileGuidId = res.PersonalInformation.IdProfile;\r\n                                    $scope.Profile = res.PersonalInformation;\r\n                                    $scope.Educations = res.Educations;\r\n                                    $scope.Skills = res.Skills;\r\n                                    $scope.WorkExps = res.WorkExps;\r\n                                    $scope.References = res.References;\r\n                                }\r\n                            });\r\n                        }\r\n                    };\r\n                    $scope.uploadFileNameChanged = function (evt) {\r\n                        var file = evt.currentTarget.files[0];\r\n                        var reader = new FileReader();\r\n                        reader.onload = function (evt) {\r\n                            $scope.$apply(function ($scope) {\r\n                                $scope.myImage = evt.target.result;\r\n                            });\r\n                        };\r\n                        reader.readAsDataURL(file);\r\n                    };\r\n                    $scope.SubmitPersonalInfo = function () {\r\n                        uploadService.CvPhoto($scope.myImage)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                logger.log(\"Saved successfully.\");\r\n                            }\r\n                        });\r\n                        var profile = $scope.Profile;\r\n                        profileService.SubmitPersonalInfo(profile)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                logger.log(\"Saved successfully.\");\r\n                                if ($scope.ProfileId == null) {\r\n                                    $location.path($location.$$path + response.data.GuidId);\r\n                                }\r\n                                $scope.Profile.Id = response.data.Id;\r\n                                $scope.Profile.IdProfile = response.data.GuidId;\r\n                                $scope.ProfileId = response.data.Id;\r\n                                $scope.ProfileGuidId = response.data.GuidId;\r\n                            }\r\n                        });\r\n                    };\r\n                    $scope.GotoPersonalInfo = function () {\r\n                        $scope.step = 'personalInformation';\r\n                    };\r\n                    $scope.GotoWorkExp = function () {\r\n                        $scope.step = 'workExperience';\r\n                    };\r\n                    $scope.GotoEducation = function () {\r\n                        $scope.step = 'education';\r\n                    };\r\n                    $scope.GotoSkill = function () {\r\n                        $scope.step = 'skill';\r\n                    };\r\n                    $scope.GotoRef = function () {\r\n                        $scope.step = 'reference';\r\n                    };\r\n                    $scope.SubmitAcction = function () {\r\n                        switch ($scope.step) {\r\n                            case 'personalInformation': {\r\n                                $scope.SubmitPersonalInfo();\r\n                                break;\r\n                            }\r\n                            case 'education': {\r\n                                $scope.SubmitEdus();\r\n                                break;\r\n                            }\r\n                            case 'workExperience': {\r\n                                $scope.SubmitWorkExps();\r\n                                break;\r\n                            }\r\n                            case 'skill': {\r\n                                $scope.SubmitSkills();\r\n                                break;\r\n                            }\r\n                            case 'reference': {\r\n                                $scope.SubmitRefs();\r\n                                break;\r\n                            }\r\n                        }\r\n                    };\r\n                    $scope.AcctionStep = function () {\r\n                        switch ($scope.step) {\r\n                            case 'personalInformation': {\r\n                                $scope.GotoPersonalInfo();\r\n                                break;\r\n                            }\r\n                            case 'education': {\r\n                                $scope.GotoEducation();\r\n                                break;\r\n                            }\r\n                            case 'workExperience': {\r\n                                $scope.GotoWorkExp();\r\n                                break;\r\n                            }\r\n                            case 'skill': {\r\n                                $scope.GotoSkill();\r\n                                break;\r\n                            }\r\n                            case 'reference': {\r\n                                $scope.GotoRef();\r\n                                break;\r\n                            }\r\n                        }\r\n                    };\r\n                    $scope.PreviousStep = function () {\r\n                        if ($scope.step == $scope.steps[0]) {\r\n                            return;\r\n                        }\r\n                        for (var index = 0; index < $scope.steps.length; index++) {\r\n                            if ($scope.step == $scope.steps[index]) {\r\n                                $scope.step = $scope.steps[index - 1];\r\n                                $scope.AcctionStep();\r\n                                return;\r\n                            }\r\n                        }\r\n                    };\r\n                    $scope.NextStep = function () {\r\n                        if ($scope.step == $scope.steps[$scope.steps.length - 1]) {\r\n                            return;\r\n                        }\r\n                        for (var index = 0; index < $scope.steps.length; index++) {\r\n                            if ($scope.step == $scope.steps[index]) {\r\n                                $scope.step = $scope.steps[index + 1];\r\n                                $scope.AcctionStep();\r\n                                return;\r\n                            }\r\n                        }\r\n                    };\r\n                    // education\r\n                    $scope.AddEducation = function () {\r\n                        $scope.Educations.push({\r\n                            University: '',\r\n                            FromYear: '',\r\n                            ToYear: '',\r\n                            Description: '',\r\n                            IdProfile: $scope.ProfileId\r\n                        });\r\n                    };\r\n                    $scope.RemoveEducation = function (index) {\r\n                        $scope.Educations.splice(index, 1);\r\n                    };\r\n                    $scope.SubmitEdus = function () {\r\n                        profileService.SubmitEdus($scope.ProfileId, $scope.Educations)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                logger.log(\"Saved successfully.\");\r\n                                $scope.RebindEdus();\r\n                            }\r\n                        });\r\n                    };\r\n                    $scope.RebindEdus = function () {\r\n                        $scope.Educations = [];\r\n                        profileService.GetEdus($scope.ProfileId)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                $scope.Educations = response.data;\r\n                            }\r\n                        });\r\n                    };\r\n                    // skills\r\n                    $scope.AddSkill = function () {\r\n                        $scope.Skills.push({\r\n                            Name: '',\r\n                            Score: 1,\r\n                            IdProfile: $scope.ProfileId\r\n                        });\r\n                    };\r\n                    $scope.RemoveSkill = function (index) {\r\n                        $scope.Skills.splice(index, 1);\r\n                    };\r\n                    $scope.SubmitSkills = function () {\r\n                        skillService.SubmitSkills($scope.ProfileId, $scope.Skills)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                logger.log(\"Saved successfully.\");\r\n                                $scope.RebindSkills();\r\n                            }\r\n                        });\r\n                    };\r\n                    $scope.RebindSkills = function () {\r\n                        $scope.Skills = [];\r\n                        skillService.GetSkills($scope.ProfileId)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                $scope.Skills = response.data;\r\n                            }\r\n                        });\r\n                    };\r\n                    //work experience\r\n                    $scope.RemoveWorkExp = function (index) {\r\n                        $scope.WorkExps.splice(index, 1);\r\n                    };\r\n                    $scope.AddWorkExp = function () {\r\n                        $scope.WorkExps.push({\r\n                            Company: '',\r\n                            FromMonth: '',\r\n                            FromYear: '',\r\n                            ToMonth: '',\r\n                            ToYear: '',\r\n                            Position: '',\r\n                            Description: '',\r\n                            IdProfile: $scope.ProfileId\r\n                        });\r\n                    };\r\n                    $scope.SubmitWorkExps = function () {\r\n                        workExpService.SubmitWorkExps($scope.ProfileId, $scope.WorkExps)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                logger.log(\"Saved successfully.\");\r\n                                $scope.RebindWorkExps();\r\n                            }\r\n                        });\r\n                    };\r\n                    $scope.RebindWorkExps = function () {\r\n                        $scope.WorkExps = [];\r\n                        workExpService.GetWorkExps($scope.ProfileId)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                $scope.WorkExps = response.data;\r\n                            }\r\n                        });\r\n                    };\r\n                    //reference\r\n                    $scope.RemoveRef = function (index) {\r\n                        $scope.References.splice(index, 1);\r\n                    };\r\n                    $scope.AddRef = function () {\r\n                        $scope.References.push({\r\n                            IdProfile: $scope.ProfileId\r\n                        });\r\n                    };\r\n                    $scope.SubmitRefs = function () {\r\n                        referenceService.SubmitRefs($scope.ProfileId, $scope.References)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                logger.log(\"Saved successfully.\");\r\n                                $scope.RebindRefs();\r\n                            }\r\n                        });\r\n                    };\r\n                    $scope.RebindRefs = function () {\r\n                        $scope.References = [];\r\n                        referenceService.GetRefs($scope.ProfileId)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                $scope.References = response.data;\r\n                            }\r\n                        });\r\n                    };\r\n                });\r\n            };\r\n            return Profile;\r\n        }());\r\n        Profile.$inject = ['$scope', '$location', 'logger', 'profileService', 'skillService', 'workExpService', 'referenceService', 'uploadService'];\r\n        Controller.Profile = Profile;\r\n    })(Controller = CVGen.Controller || (CVGen.Controller = {}));\r\n})(CVGen || (CVGen = {}));\r\nvar CVGen;\r\n(function (CVGen) {\r\n    var Controller;\r\n    (function (Controller) {\r\n        var Common = (function () {\r\n            function Common() {\r\n            }\r\n            Common.Configure = function (module) {\r\n                module.controller('CommonCtrl', function ($scope) {\r\n                    $scope.ClearClientData = function () {\r\n                        localStorage.clear();\r\n                        window.location.href = \"/\";\r\n                    };\r\n                });\r\n            };\r\n            return Common;\r\n        }());\r\n        Common.$inject = ['$scope'];\r\n        Controller.Common = Common;\r\n    })(Controller = CVGen.Controller || (CVGen.Controller = {}));\r\n})(CVGen || (CVGen = {}));\r\n/// <reference path=\"../references.ts\" />\r\nvar CVGen;\r\n/// <reference path=\"../references.ts\" />\r\n(function (CVGen) {\r\n    var Services;\r\n    (function (Services) {\r\n        var ProfileService = (function () {\r\n            function ProfileService($http) {\r\n                var _this = this;\r\n                this.SubmitProfile = function (profileModel) {\r\n                    return _this.httpService({\r\n                        data: profileModel,\r\n                        method: 'POST',\r\n                        url: \"/api/Profile/SubmitProfile\",\r\n                    });\r\n                };\r\n                this.GetProfile = function (idProfile) {\r\n                    var params = { idProfile: idProfile };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        method: 'GET',\r\n                        url: \"/api/Profile/GetUserProfile\",\r\n                    });\r\n                };\r\n                this.SubmitPersonalInfo = function (model) {\r\n                    return _this.httpService({\r\n                        data: model,\r\n                        method: 'POST',\r\n                        url: \"/api/Profile/SubmitPersonalInfo\",\r\n                    });\r\n                };\r\n                this.SubmitEdus = function (profileId, model) {\r\n                    var params = { profileId: profileId };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        data: model,\r\n                        method: 'POST',\r\n                        url: \"/api/Edu/SubmitEdus\",\r\n                    });\r\n                };\r\n                this.GetEdus = function (idProfile) {\r\n                    var params = { idProfile: idProfile };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        method: 'GET',\r\n                        url: \"/api/Edu/GetEdus\",\r\n                    });\r\n                };\r\n                this.httpService = $http;\r\n            }\r\n            return ProfileService;\r\n        }());\r\n        ProfileService.$inject = [\"$http\"];\r\n        Services.ProfileService = ProfileService;\r\n    })(Services = CVGen.Services || (CVGen.Services = {}));\r\n})(CVGen || (CVGen = {}));\r\n/// <reference path=\"../references.ts\" />\r\nvar CVGen;\r\n/// <reference path=\"../references.ts\" />\r\n(function (CVGen) {\r\n    var Services;\r\n    (function (Services) {\r\n        var TemplateService = (function () {\r\n            function TemplateService($http) {\r\n                var _this = this;\r\n                this.GetAll = function () {\r\n                    return _this.httpService({\r\n                        method: 'GET',\r\n                        url: \"/api/Template/GetAll\",\r\n                    });\r\n                };\r\n                this.httpService = $http;\r\n            }\r\n            return TemplateService;\r\n        }());\r\n        TemplateService.$inject = [\"$http\"];\r\n        Services.TemplateService = TemplateService;\r\n    })(Services = CVGen.Services || (CVGen.Services = {}));\r\n})(CVGen || (CVGen = {}));\r\n/// <reference path=\"../references.ts\" />\r\nvar CVGen;\r\n/// <reference path=\"../references.ts\" />\r\n(function (CVGen) {\r\n    var Services;\r\n    (function (Services) {\r\n        var SkillService = (function () {\r\n            function SkillService($http) {\r\n                var _this = this;\r\n                this.SubmitSkills = function (profileId, model) {\r\n                    var params = { profileId: profileId };\r\n                    return _this.httpService({\r\n                        data: model,\r\n                        params: params,\r\n                        method: 'POST',\r\n                        url: \"/api/Skill/SubmitSkills\",\r\n                    });\r\n                };\r\n                this.GetSkills = function (idProfile) {\r\n                    var params = { idProfile: idProfile };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        method: 'GET',\r\n                        url: \"/api/skill/GetSkills\",\r\n                    });\r\n                };\r\n                this.httpService = $http;\r\n            }\r\n            return SkillService;\r\n        }());\r\n        SkillService.$inject = [\"$http\"];\r\n        Services.SkillService = SkillService;\r\n    })(Services = CVGen.Services || (CVGen.Services = {}));\r\n})(CVGen || (CVGen = {}));\r\n/// <reference path=\"../references.ts\" />\r\nvar CVGen;\r\n/// <reference path=\"../references.ts\" />\r\n(function (CVGen) {\r\n    var Services;\r\n    (function (Services) {\r\n        var WorkExpService = (function () {\r\n            function WorkExpService($http) {\r\n                var _this = this;\r\n                this.SubmitWorkExps = function (profileId, model) {\r\n                    var params = { profileId: profileId };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        data: model,\r\n                        method: 'POST',\r\n                        url: \"/api/WorkExp/SubmitWorkExps\",\r\n                    });\r\n                };\r\n                this.GetWorkExps = function (idProfile) {\r\n                    var params = { idProfile: idProfile };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        method: 'GET',\r\n                        url: \"/api/WorkExp/GetWorkExps\",\r\n                    });\r\n                };\r\n                this.httpService = $http;\r\n            }\r\n            return WorkExpService;\r\n        }());\r\n        WorkExpService.$inject = [\"$http\"];\r\n        Services.WorkExpService = WorkExpService;\r\n    })(Services = CVGen.Services || (CVGen.Services = {}));\r\n})(CVGen || (CVGen = {}));\r\n/// <reference path=\"../references.ts\" />\r\nvar CVGen;\r\n/// <reference path=\"../references.ts\" />\r\n(function (CVGen) {\r\n    var Services;\r\n    (function (Services) {\r\n        var ReferenceService = (function () {\r\n            function ReferenceService($http) {\r\n                var _this = this;\r\n                this.SubmitRefs = function (profileId, model) {\r\n                    var params = { profileId: profileId };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        data: model,\r\n                        method: 'POST',\r\n                        url: \"/api/ref/SubmitRefs\",\r\n                    });\r\n                };\r\n                this.GetRefs = function (idProfile) {\r\n                    var params = { idProfile: idProfile };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        method: 'GET',\r\n                        url: \"/api/ref/GetRefs\",\r\n                    });\r\n                };\r\n                this.httpService = $http;\r\n            }\r\n            return ReferenceService;\r\n        }());\r\n        ReferenceService.$inject = [\"$http\"];\r\n        Services.ReferenceService = ReferenceService;\r\n    })(Services = CVGen.Services || (CVGen.Services = {}));\r\n})(CVGen || (CVGen = {}));\r\n/// <reference path=\"../references.ts\" />\r\nvar CVGen;\r\n/// <reference path=\"../references.ts\" />\r\n(function (CVGen) {\r\n    var Services;\r\n    (function (Services) {\r\n        var UploadService = (function () {\r\n            function UploadService($http) {\r\n                var _this = this;\r\n                this.CvPhoto = function (imageString64) {\r\n                    var model = { Content: imageString64 };\r\n                    return _this.httpService({\r\n                        data: model,\r\n                        method: 'POST',\r\n                        url: \"/api/upload/CvPhoto\",\r\n                    });\r\n                };\r\n                this.httpService = $http;\r\n            }\r\n            return UploadService;\r\n        }());\r\n        UploadService.$inject = [\"$http\"];\r\n        Services.UploadService = UploadService;\r\n    })(Services = CVGen.Services || (CVGen.Services = {}));\r\n})(CVGen || (CVGen = {}));\r\n/// <reference path=\"../Scripts/typings/angularjs/angular.d.ts\" />\r\n/// <reference path=\"../Scripts/typings/toastr/toastr.d.ts\" />\r\n/// <reference path=\"base.ts\" />\r\n/// <reference path=\"controllers/app.module.home.ts\" />\r\n/// <reference path=\"controllers/app.module.resume.ts\" />\r\n/// <reference path=\"controllers/app.module.userResume.ts\" />\r\n/// <reference path=\"controllers/app.module.profile.ts\" />\r\n/// <reference path=\"controllers/app.module.common.ts\" />\r\n/// <reference path=\"services/profileService.ts\" />\r\n/// <reference path=\"services/templateService.ts\" />\r\n/// <reference path=\"services/skillService.ts\" />\r\n/// <reference path=\"services/workExpService.ts\" />\r\n/// <reference path=\"services/referenceService.ts\" />\r\n/// <reference path=\"services/uploadService.ts\" /> \r\n(function () {\r\n    var cvGeneratorApp = angular.module(\"cvGeneratorApp\", ['uiCropper']);\r\n    cvGeneratorApp.factory('httpInterceptor', ['logger', function (_) { return httpInterceptor(_); }]);\r\n    cvGeneratorApp.config(['$httpProvider', function ($httpProvider) {\r\n            $httpProvider.interceptors.push('httpInterceptor');\r\n        }]);\r\n    function httpInterceptor(logger) {\r\n        return {\r\n            request: function (config) {\r\n                //config.headers['Authorization'] = \"Bearer \" + CVGen.Base.UserToken;\r\n                config.headers.Authorization = CVGen.Base.Const.USER_TOKEN;\r\n                return config;\r\n            },\r\n            response: function (res) {\r\n                if (res.status != 200) {\r\n                    logger.logWarning(\"ERROR CODE \" + res.status);\r\n                }\r\n                return res;\r\n            },\r\n            responseError: function (res) {\r\n                switch (res.status) {\r\n                    default:\r\n                        debugger;\r\n                        logger.logError(\"# RESPONSE ERROR STATUS CODE \" + res.status);\r\n                        break;\r\n                }\r\n                return res;\r\n            }\r\n        };\r\n    }\r\n    cvGeneratorApp.config(function ($locationProvider) {\r\n        //$locationProvider.html5Mode({\r\n        //    enabled: true,\r\n        //    requireBase: false\r\n        //});\r\n        //$locationProvider.hashPrefix(\"\");\r\n    });\r\n    cvGeneratorApp.service(\"profileService\", CVGen.Services.ProfileService);\r\n    cvGeneratorApp.service(\"skillService\", CVGen.Services.SkillService);\r\n    cvGeneratorApp.service(\"templateService\", CVGen.Services.TemplateService);\r\n    cvGeneratorApp.service(\"workExpService\", CVGen.Services.WorkExpService);\r\n    cvGeneratorApp.service(\"referenceService\", CVGen.Services.ReferenceService);\r\n    cvGeneratorApp.service(\"uploadService\", CVGen.Services.UploadService);\r\n    CVGen.Controller.Home.Configure(cvGeneratorApp);\r\n    CVGen.Controller.Resume.Configure(cvGeneratorApp);\r\n    CVGen.Controller.Profile.Configure(cvGeneratorApp);\r\n    CVGen.Controller.UserResume.Configure(cvGeneratorApp);\r\n    CVGen.Controller.Common.Configure(cvGeneratorApp);\r\n    cvGeneratorApp.config(function () {\r\n        if (CVGen.Base.Const.USER_TOKEN == null || CVGen.Base.Const.USER_TOKEN == '') {\r\n            CVGen.Base.Const.USER_TOKEN = localStorage.getItem(\"tk\");\r\n        }\r\n        else {\r\n            localStorage.setItem(\"tk\", CVGen.Base.Const.USER_TOKEN);\r\n        }\r\n    });\r\n    cvGeneratorApp.factory(\"logger\", [\r\n        function () {\r\n            var logIt;\r\n            return toastr.options = {\r\n                closeButton: !0,\r\n                positionClass: \"toast-bottom-right\",\r\n                timeOut: 3000\r\n            }, logIt = function (message, type) {\r\n                return toastr[type](message);\r\n            }, {\r\n                log: function (message) {\r\n                    logIt(message, \"info\");\r\n                },\r\n                logWarning: function (message) {\r\n                    logIt(message, \"warning\");\r\n                },\r\n                logSuccess: function (message) {\r\n                    logIt(message, \"success\");\r\n                },\r\n                logError: function (message) {\r\n                    logIt(message, \"error\");\r\n                }\r\n            };\r\n        }\r\n    ]);\r\n    cvGeneratorApp.directive('sgNumberInput', ['$filter', '$locale', function ($filter, $locale) {\r\n            return {\r\n                require: 'ngModel',\r\n                restrict: \"A\",\r\n                link: function ($scope, element, attrs, ctrl) {\r\n                    var fractionSize = parseInt(attrs['fractionSize']) || 0;\r\n                    var numberFilter = $filter('number');\r\n                    //format the view value\r\n                    ctrl.$formatters.push(function (modelValue) {\r\n                        var retVal = numberFilter(modelValue, fractionSize);\r\n                        var isValid = isNaN(modelValue) == false;\r\n                        ctrl.$setValidity(attrs.name, isValid);\r\n                        return retVal;\r\n                    });\r\n                    //parse user's input\r\n                    ctrl.$parsers.push(function (viewValue) {\r\n                        var caretPosition = getCaretPosition(element[0]), nonNumericCount = countNonNumericChars(viewValue);\r\n                        viewValue = viewValue || '';\r\n                        //Replace all possible group separators\r\n                        var trimmedValue = viewValue.trim().replace(/,/g, '').replace(/`/g, '').replace(/'/g, '').replace(/\\u00a0/g, '').replace(/ /g, '');\r\n                        //If numericValue contains more decimal places than is allowed by fractionSize, then numberFilter would round the value up\r\n                        //Thus 123.109 would become 123.11\r\n                        //We do not want that, therefore I strip the extra decimal numbers\r\n                        var separator = $locale.NUMBER_FORMATS.DECIMAL_SEP;\r\n                        var arr = trimmedValue.split(separator);\r\n                        var decimalPlaces = arr[1];\r\n                        if (decimalPlaces != null && decimalPlaces.length > fractionSize) {\r\n                            //Trim extra decimal places\r\n                            decimalPlaces = decimalPlaces.substring(0, fractionSize);\r\n                            trimmedValue = arr[0] + separator + decimalPlaces;\r\n                        }\r\n                        var numericValue = parseFloat(trimmedValue);\r\n                        var isEmpty = numericValue == null || viewValue.trim() === \"\";\r\n                        var isRequired = attrs.required || false;\r\n                        var isValid = true;\r\n                        if (isEmpty && isRequired) {\r\n                            isValid = false;\r\n                        }\r\n                        if (isEmpty == false && isNaN(numericValue)) {\r\n                            isValid = false;\r\n                        }\r\n                        ctrl.$setValidity(attrs.name, isValid);\r\n                        if (isNaN(numericValue) == false && isValid) {\r\n                            var newViewValue = numberFilter(numericValue, fractionSize);\r\n                            element.val(newViewValue);\r\n                            var newNonNumbericCount = countNonNumericChars(newViewValue);\r\n                            var diff = newNonNumbericCount - nonNumericCount;\r\n                            var newCaretPosition = caretPosition + diff;\r\n                            if (nonNumericCount == 0 && newCaretPosition > 0) {\r\n                                if (fractionSize > 0) {\r\n                                    newCaretPosition--;\r\n                                }\r\n                            }\r\n                            setCaretPosition(element[0], newCaretPosition);\r\n                        }\r\n                        return isNaN(numericValue) == false ? numericValue : null;\r\n                    });\r\n                } //end of link function\r\n            };\r\n            //#region helper methods\r\n            function getCaretPosition(inputField) {\r\n                // Initialize\r\n                var position = 0;\r\n                // IE Support\r\n                //if (document.selection) {\r\n                //    inputField.focus();\r\n                //    // To get cursor position, get empty selection range\r\n                //    var emptySelection = document.selection.createRange();\r\n                //    // Move selection start to 0 position\r\n                //    emptySelection.moveStart('character', -inputField.value.length);\r\n                //    // The caret position is selection length\r\n                //    position = emptySelection.text.length;\r\n                //}\r\n                //else\r\n                if (inputField.selectionStart || inputField.selectionStart == 0) {\r\n                    position = inputField.selectionStart;\r\n                }\r\n                return position;\r\n            }\r\n            function setCaretPosition(inputElement, position) {\r\n                if (inputElement.createTextRange) {\r\n                    var range = inputElement.createTextRange();\r\n                    range.move('character', position);\r\n                    range.select();\r\n                }\r\n                else {\r\n                    if (inputElement.selectionStart) {\r\n                        inputElement.focus();\r\n                        inputElement.setSelectionRange(position, position);\r\n                    }\r\n                    else {\r\n                        inputElement.focus();\r\n                    }\r\n                }\r\n            }\r\n            function countNonNumericChars(value) {\r\n                return (value.match(/[^a-z0-9]/gi) || []).length;\r\n            }\r\n            //#endregion helper methods\r\n        }]);\r\n    //valid-number\r\n    cvGeneratorApp.directive('validNumber', function () {\r\n        return {\r\n            require: '?ngModel',\r\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                if (!ngModelCtrl) {\r\n                    return;\r\n                }\r\n                ngModelCtrl.$parsers.push(function (val) {\r\n                    if (angular.isUndefined(val)) {\r\n                        var val = '';\r\n                    }\r\n                    var clean = val.replace(/[^-0-9\\.\\,]/g, '');\r\n                    var negativeCheck = clean.split('-');\r\n                    var decimalCheck = clean.split('.');\r\n                    if (!angular.isUndefined(negativeCheck[1])) {\r\n                        negativeCheck[1] = negativeCheck[1].slice(0, negativeCheck[1].length);\r\n                        clean = negativeCheck[0] + '-' + negativeCheck[1];\r\n                        if (negativeCheck[0].length > 0) {\r\n                            clean = negativeCheck[0];\r\n                        }\r\n                    }\r\n                    if (!angular.isUndefined(decimalCheck[1])) {\r\n                        decimalCheck[1] = decimalCheck[1].slice(0, 2);\r\n                        clean = decimalCheck[0] + '.' + decimalCheck[1];\r\n                    }\r\n                    if (val !== clean) {\r\n                        ngModelCtrl.$setViewValue(clean);\r\n                        ngModelCtrl.$render();\r\n                    }\r\n                    return clean;\r\n                });\r\n                element.bind('keypress', function (event) {\r\n                    if (event.keyCode === 32) {\r\n                        event.preventDefault();\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    });\r\n})();\r\n"
        }
      ],
      "filteredModules": 0,
      "origins": [
        {
          "moduleId": 1,
          "module": "D:\\Git\\CVGenerator\\node_modules\\ts-loader\\index.js!D:\\Git\\CVGenerator\\app\\app.module.ts",
          "moduleIdentifier": "D:\\Git\\CVGenerator\\node_modules\\ts-loader\\index.js!D:\\Git\\CVGenerator\\app\\app.module.ts",
          "moduleName": "./app/app.module.ts",
          "loc": "",
          "name": "app",
          "reasons": []
        }
      ]
    },
    {
      "id": 1,
      "rendered": true,
      "initial": true,
      "entry": true,
      "extraAsync": false,
      "size": 3067,
      "names": [
        "theme"
      ],
      "files": [
        "./dist/theme.bundle.js"
      ],
      "hash": "0813eda7921d96b54ffe",
      "parents": [],
      "modules": [
        {
          "id": 0,
          "identifier": "D:\\Git\\CVGenerator\\Content\\Main\\js\\theme.js",
          "name": "./Content/Main/js/theme.js",
          "index": 1,
          "index2": 1,
          "size": 3067,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            1
          ],
          "assets": [],
          "issuer": null,
          "issuerId": null,
          "issuerName": null,
          "profile": {
            "factory": 15,
            "building": 23
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [],
          "usedExports": true,
          "providedExports": null,
          "depth": 0,
          "source": "(function($) {\n  \"use strict\";\n\n  //Run function when document ready\n  $(document).ready(function() {\n    initAffix();\n    //initLightBox();\n    initBtnFile();\n    clickEvents();\n  });\n\n\n\n  function initAffix() {\n    $('#affix-box').affix({\n      offset: {\n        top: function() {\n          return (this.top = $('#affix-box').offset().top)\n        },\n        bottom: function() {\n          return (this.bottom = $('.main-footer').outerHeight(true) + $('#map-area').outerHeight(true) + 120)\n        }\n      }\n    });\n\n  }\n\n\n  //Lightbox (popup)\n  //function initLightBox() {\n  //  $('.image-popup').magnificPopup({\n  //    type: 'image',\n  //    closeOnContentClick: true,\n  //    closeBtnInside: false,\n  //    fixedContentPos: true,\n  //    mainClass: 'mfp-no-margins mfp-with-zoom', // class to remove default margin from left and right side\n  //    image: {\n  //      verticalFit: true\n  //    },\n  //    zoom: {\n  //      enabled: true,\n  //      duration: 300 // don't foget to change the duration also in CSS\n  //    }\n  //  });\n\n  //  $('.galery-popup-area').magnificPopup({\n  //    delegate: 'a.galery-popup',\n  //    type: 'image',\n  //    tLoading: 'Loading image #%curr%...',\n  //    mainClass: 'mfp-img-mobile',\n  //    gallery: {\n  //      enabled: true,\n  //      navigateByImgClick: true,\n  //      preload: [0, 1] // Will preload 0 - before current, and 1 after the current image\n  //    },\n  //    image: {\n  //      tError: '<a href=\"%url%\">The image #%curr%</a> could not be loaded.',\n  //      titleSrc: function(item) {\n  //        return item.el.attr('title');\n  //      }\n  //    }\n  //  });\n\n  //  $('.popup-youtube, .popup-vimeo, .popup-gmaps').magnificPopup({\n  //    disableOn: 700,\n  //    type: 'iframe',\n  //    mainClass: 'mfp-fade',\n  //    removalDelay: 160,\n  //    preloader: false,\n  //    fixedContentPos: false\n  //  });\n  //}\n\n\n  //Tigger Custom Btn FIle\n  function initBtnFile() {\n    $(document).on('change', '.btn-file :file', function() {\n      var input = $(this),\n              numFiles = input.get(0).files ? input.get(0).files.length : 1,\n              label = input.val().replace(/\\\\/g, '/').replace(/.*\\//, '');\n      input.trigger('fileselect', [numFiles, label]);\n    });\n\n    $('.btn-file :file').on('fileselect', function(event, numFiles, label) {\n      var input = $(this).parents('.input-group').find(':text'),\n              log = numFiles > 1 ? numFiles + ' files selected' : label;\n      if (input.length) {\n        input.val(log);\n      } else {\n        if (log) {\n          console.log(log);\n        }\n      }\n    });\n  }\n\n  function clickEvents() {\n    //smooth scroll\n    $('.link-innerpage').click(function(e) {\n      var target = this.hash, $target = $(target);\n      $('html, body').stop().animate({\n        'scrollTop': $target.offset().top\n      }, 1500, 'easeInOutExpo', function() {\n      });\n      return false;\n    });\n    \n    //toggle nav mobile \n    $('.btn-nav-toogle').click(function() {\n      $('body, .mobile-nav-block').toggleClass('open-mobile-nav');\n    });\n  }\n\n\n})(jQuery);\n\n\n\n\n\n\n\n\n\n"
        }
      ],
      "filteredModules": 0,
      "origins": [
        {
          "moduleId": 0,
          "module": "D:\\Git\\CVGenerator\\Content\\Main\\js\\theme.js",
          "moduleIdentifier": "D:\\Git\\CVGenerator\\Content\\Main\\js\\theme.js",
          "moduleName": "./Content/Main/js/theme.js",
          "loc": "",
          "name": "theme",
          "reasons": []
        }
      ]
    }
  ],
  "modules": [
    {
      "id": 0,
      "identifier": "D:\\Git\\CVGenerator\\Content\\Main\\js\\theme.js",
      "name": "./Content/Main/js/theme.js",
      "index": 1,
      "index2": 1,
      "size": 3067,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        1
      ],
      "assets": [],
      "issuer": null,
      "issuerId": null,
      "issuerName": null,
      "profile": {
        "factory": 15,
        "building": 23
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [],
      "usedExports": true,
      "providedExports": null,
      "depth": 0,
      "source": "(function($) {\n  \"use strict\";\n\n  //Run function when document ready\n  $(document).ready(function() {\n    initAffix();\n    //initLightBox();\n    initBtnFile();\n    clickEvents();\n  });\n\n\n\n  function initAffix() {\n    $('#affix-box').affix({\n      offset: {\n        top: function() {\n          return (this.top = $('#affix-box').offset().top)\n        },\n        bottom: function() {\n          return (this.bottom = $('.main-footer').outerHeight(true) + $('#map-area').outerHeight(true) + 120)\n        }\n      }\n    });\n\n  }\n\n\n  //Lightbox (popup)\n  //function initLightBox() {\n  //  $('.image-popup').magnificPopup({\n  //    type: 'image',\n  //    closeOnContentClick: true,\n  //    closeBtnInside: false,\n  //    fixedContentPos: true,\n  //    mainClass: 'mfp-no-margins mfp-with-zoom', // class to remove default margin from left and right side\n  //    image: {\n  //      verticalFit: true\n  //    },\n  //    zoom: {\n  //      enabled: true,\n  //      duration: 300 // don't foget to change the duration also in CSS\n  //    }\n  //  });\n\n  //  $('.galery-popup-area').magnificPopup({\n  //    delegate: 'a.galery-popup',\n  //    type: 'image',\n  //    tLoading: 'Loading image #%curr%...',\n  //    mainClass: 'mfp-img-mobile',\n  //    gallery: {\n  //      enabled: true,\n  //      navigateByImgClick: true,\n  //      preload: [0, 1] // Will preload 0 - before current, and 1 after the current image\n  //    },\n  //    image: {\n  //      tError: '<a href=\"%url%\">The image #%curr%</a> could not be loaded.',\n  //      titleSrc: function(item) {\n  //        return item.el.attr('title');\n  //      }\n  //    }\n  //  });\n\n  //  $('.popup-youtube, .popup-vimeo, .popup-gmaps').magnificPopup({\n  //    disableOn: 700,\n  //    type: 'iframe',\n  //    mainClass: 'mfp-fade',\n  //    removalDelay: 160,\n  //    preloader: false,\n  //    fixedContentPos: false\n  //  });\n  //}\n\n\n  //Tigger Custom Btn FIle\n  function initBtnFile() {\n    $(document).on('change', '.btn-file :file', function() {\n      var input = $(this),\n              numFiles = input.get(0).files ? input.get(0).files.length : 1,\n              label = input.val().replace(/\\\\/g, '/').replace(/.*\\//, '');\n      input.trigger('fileselect', [numFiles, label]);\n    });\n\n    $('.btn-file :file').on('fileselect', function(event, numFiles, label) {\n      var input = $(this).parents('.input-group').find(':text'),\n              log = numFiles > 1 ? numFiles + ' files selected' : label;\n      if (input.length) {\n        input.val(log);\n      } else {\n        if (log) {\n          console.log(log);\n        }\n      }\n    });\n  }\n\n  function clickEvents() {\n    //smooth scroll\n    $('.link-innerpage').click(function(e) {\n      var target = this.hash, $target = $(target);\n      $('html, body').stop().animate({\n        'scrollTop': $target.offset().top\n      }, 1500, 'easeInOutExpo', function() {\n      });\n      return false;\n    });\n    \n    //toggle nav mobile \n    $('.btn-nav-toogle').click(function() {\n      $('body, .mobile-nav-block').toggleClass('open-mobile-nav');\n    });\n  }\n\n\n})(jQuery);\n\n\n\n\n\n\n\n\n\n"
    },
    {
      "id": 1,
      "identifier": "D:\\Git\\CVGenerator\\node_modules\\ts-loader\\index.js!D:\\Git\\CVGenerator\\app\\app.module.ts",
      "name": "./app/app.module.ts",
      "index": 0,
      "index2": 0,
      "size": 40585,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": null,
      "issuerId": null,
      "issuerName": null,
      "profile": {
        "factory": 46,
        "building": 1113
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [],
      "usedExports": true,
      "providedExports": null,
      "depth": 0,
      "source": "/// <reference path=\"../references.ts\" />\r\n'use strict';\r\nvar CVGen;\r\n(function (CVGen) {\r\n    var Base;\r\n    (function (Base) {\r\n        Base.UserToken = userToken;\r\n        var Const = (function () {\r\n            function Const() {\r\n            }\r\n            Object.defineProperty(Const, \"USER_TOKEN\", {\r\n                get: function () {\r\n                    return Base.UserToken;\r\n                },\r\n                set: function (token) {\r\n                    Base.UserToken = token;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n            return Const;\r\n        }());\r\n        Base.Const = Const;\r\n    })(Base = CVGen.Base || (CVGen.Base = {}));\r\n})(CVGen || (CVGen = {}));\r\nvar CVGen;\r\n(function (CVGen) {\r\n    var Controller;\r\n    (function (Controller) {\r\n        var Home = (function () {\r\n            function Home() {\r\n            }\r\n            //public static $inject = ['$scope', '$filter', '$location'];\r\n            Home.Configure = function (module) {\r\n                module.controller('HomeCtrl', function () {\r\n                });\r\n            };\r\n            return Home;\r\n        }());\r\n        Controller.Home = Home;\r\n    })(Controller = CVGen.Controller || (CVGen.Controller = {}));\r\n})(CVGen || (CVGen = {}));\r\nvar CVGen;\r\n(function (CVGen) {\r\n    var Controller;\r\n    (function (Controller) {\r\n        var Resume = (function () {\r\n            function Resume() {\r\n            }\r\n            Resume.Configure = function (module) {\r\n                module.controller('ResumeCtrl', function ($scope, templateService) {\r\n                    $scope.InitViewProfile = function (data) {\r\n                        templateService.GetAll()\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                $scope.Templates = response.data;\r\n                            }\r\n                        });\r\n                    };\r\n                });\r\n            };\r\n            return Resume;\r\n        }());\r\n        Resume.$inject = ['$scope', 'templateService'];\r\n        Controller.Resume = Resume;\r\n    })(Controller = CVGen.Controller || (CVGen.Controller = {}));\r\n})(CVGen || (CVGen = {}));\r\nvar CVGen;\r\n(function (CVGen) {\r\n    var Controller;\r\n    (function (Controller) {\r\n        var UserResume = (function () {\r\n            function UserResume() {\r\n            }\r\n            UserResume.Configure = function (module) {\r\n                module.controller('UserResumeCtrl', function ($scope, templateService) {\r\n                    $scope.InitViewUserProfile = function (data) {\r\n                        $scope.TemplateSrc = data.Template.TemplateSrc;\r\n                        $scope.TemplateSrcIndex = data.Template.TemplateSrc + 'index.html';\r\n                        $scope.PersonalInformation = data.PersonalInformation;\r\n                        $scope.Educations = data.Educations;\r\n                        $scope.WorkExps = data.WorkExps;\r\n                        for (var i = 0; i < $scope.WorkExps.length; i++) {\r\n                            var work = $scope.WorkExps[i];\r\n                            work.DescLines = work.Description.split(/\\r?\\n/);\r\n                        }\r\n                        $scope.Skills = data.Skills;\r\n                        $scope.References = data.References;\r\n                        $scope.Title = data.PersonalInformation.FirstName + \" \" + data.PersonalInformation.LastName + \" - Curriculum Vitae\";\r\n                    };\r\n                    $scope.InitViewMyCvs = function (data) {\r\n                        $scope.AccountInfo = {};\r\n                        $scope.AccountInfo.UserEmail = data.UserEmail;\r\n                        $scope.PersonalInformations = data.PersonalInformations;\r\n                    };\r\n                    $scope.ExportMyCv = function () {\r\n                        html2canvas(document.body, {\r\n                            onrendered: function (canvas) {\r\n                                var data = canvas.toDataURL();\r\n                                var docDefinition = {\r\n                                    content: [{\r\n                                            image: data,\r\n                                            width: 500,\r\n                                        }]\r\n                                };\r\n                                pdfMake.createPdf(docDefinition).download($scope.Title + \".pdf\");\r\n                            }\r\n                        });\r\n                    };\r\n                    $scope.GetRangeTime = function (fromM, fromY, toM, toY) {\r\n                        var result = UserResume.MonthArray[fromM - 1];\r\n                        result = result.concat(\" \", fromY, \" - \");\r\n                        if (toM == null || toY == null) {\r\n                            result = result.concat(\"present\");\r\n                        }\r\n                        else {\r\n                            result = result.concat(UserResume.MonthArray[toM - 1], \" \", toY);\r\n                        }\r\n                        return result;\r\n                    };\r\n                });\r\n            };\r\n            return UserResume;\r\n        }());\r\n        UserResume.$inject = ['$scope', 'templateService'];\r\n        UserResume.MonthArray = ['January',\r\n            'February',\r\n            'March',\r\n            'April',\r\n            'May',\r\n            'June',\r\n            'July',\r\n            'August',\r\n            'September',\r\n            'October',\r\n            'November',\r\n            'December'];\r\n        Controller.UserResume = UserResume;\r\n    })(Controller = CVGen.Controller || (CVGen.Controller = {}));\r\n})(CVGen || (CVGen = {}));\r\nvar CVGen;\r\n(function (CVGen) {\r\n    var Controller;\r\n    (function (Controller) {\r\n        var Profile = (function () {\r\n            function Profile() {\r\n            }\r\n            Profile.Configure = function (module) {\r\n                module.controller('ProfileCtrl', function ($scope, $location, logger, profileService, skillService, workExpService, referenceService, uploadService) {\r\n                    $scope.InitCreateProfile = function () {\r\n                        $scope.myImage = '';\r\n                        $scope.myCroppedImage = '';\r\n                        $scope.steps = [\r\n                            'personalInformation',\r\n                            'education',\r\n                            'workExperience',\r\n                            'skill',\r\n                            'reference'\r\n                        ];\r\n                        $scope.step = $scope.steps[0];\r\n                        $scope.ProfileId = null;\r\n                        $scope.Profile = {};\r\n                        $scope.Educations = [];\r\n                        $scope.Skills = [];\r\n                        $scope.References = [];\r\n                        $scope.WorkExps = [];\r\n                        var tokens = $location.$$absUrl.split(\"/\");\r\n                        var id = \"\";\r\n                        var regexGuid = /^(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}$/gi;\r\n                        for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\r\n                            var token = tokens_1[_i];\r\n                            var isGuid = regexGuid.test(token);\r\n                            if (isGuid) {\r\n                                id = token;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (id != null && id.length > 0) {\r\n                            //update\r\n                            profileService.GetProfile(id)\r\n                                .then(function (response) {\r\n                                if (response.status == 200) {\r\n                                    var res = response.data;\r\n                                    $scope.ProfileId = res.PersonalInformation.Id;\r\n                                    $scope.ProfileGuidId = res.PersonalInformation.IdProfile;\r\n                                    $scope.Profile = res.PersonalInformation;\r\n                                    $scope.Educations = res.Educations;\r\n                                    $scope.Skills = res.Skills;\r\n                                    $scope.WorkExps = res.WorkExps;\r\n                                    $scope.References = res.References;\r\n                                }\r\n                            });\r\n                        }\r\n                    };\r\n                    $scope.uploadFileNameChanged = function (evt) {\r\n                        var file = evt.currentTarget.files[0];\r\n                        var reader = new FileReader();\r\n                        reader.onload = function (evt) {\r\n                            $scope.$apply(function ($scope) {\r\n                                $scope.myImage = evt.target.result;\r\n                            });\r\n                        };\r\n                        reader.readAsDataURL(file);\r\n                    };\r\n                    $scope.SubmitPersonalInfo = function () {\r\n                        uploadService.CvPhoto($scope.myImage)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                logger.log(\"Saved successfully.\");\r\n                            }\r\n                        });\r\n                        var profile = $scope.Profile;\r\n                        profileService.SubmitPersonalInfo(profile)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                logger.log(\"Saved successfully.\");\r\n                                if ($scope.ProfileId == null) {\r\n                                    $location.path($location.$$path + response.data.GuidId);\r\n                                }\r\n                                $scope.Profile.Id = response.data.Id;\r\n                                $scope.Profile.IdProfile = response.data.GuidId;\r\n                                $scope.ProfileId = response.data.Id;\r\n                                $scope.ProfileGuidId = response.data.GuidId;\r\n                            }\r\n                        });\r\n                    };\r\n                    $scope.GotoPersonalInfo = function () {\r\n                        $scope.step = 'personalInformation';\r\n                    };\r\n                    $scope.GotoWorkExp = function () {\r\n                        $scope.step = 'workExperience';\r\n                    };\r\n                    $scope.GotoEducation = function () {\r\n                        $scope.step = 'education';\r\n                    };\r\n                    $scope.GotoSkill = function () {\r\n                        $scope.step = 'skill';\r\n                    };\r\n                    $scope.GotoRef = function () {\r\n                        $scope.step = 'reference';\r\n                    };\r\n                    $scope.SubmitAcction = function () {\r\n                        switch ($scope.step) {\r\n                            case 'personalInformation': {\r\n                                $scope.SubmitPersonalInfo();\r\n                                break;\r\n                            }\r\n                            case 'education': {\r\n                                $scope.SubmitEdus();\r\n                                break;\r\n                            }\r\n                            case 'workExperience': {\r\n                                $scope.SubmitWorkExps();\r\n                                break;\r\n                            }\r\n                            case 'skill': {\r\n                                $scope.SubmitSkills();\r\n                                break;\r\n                            }\r\n                            case 'reference': {\r\n                                $scope.SubmitRefs();\r\n                                break;\r\n                            }\r\n                        }\r\n                    };\r\n                    $scope.AcctionStep = function () {\r\n                        switch ($scope.step) {\r\n                            case 'personalInformation': {\r\n                                $scope.GotoPersonalInfo();\r\n                                break;\r\n                            }\r\n                            case 'education': {\r\n                                $scope.GotoEducation();\r\n                                break;\r\n                            }\r\n                            case 'workExperience': {\r\n                                $scope.GotoWorkExp();\r\n                                break;\r\n                            }\r\n                            case 'skill': {\r\n                                $scope.GotoSkill();\r\n                                break;\r\n                            }\r\n                            case 'reference': {\r\n                                $scope.GotoRef();\r\n                                break;\r\n                            }\r\n                        }\r\n                    };\r\n                    $scope.PreviousStep = function () {\r\n                        if ($scope.step == $scope.steps[0]) {\r\n                            return;\r\n                        }\r\n                        for (var index = 0; index < $scope.steps.length; index++) {\r\n                            if ($scope.step == $scope.steps[index]) {\r\n                                $scope.step = $scope.steps[index - 1];\r\n                                $scope.AcctionStep();\r\n                                return;\r\n                            }\r\n                        }\r\n                    };\r\n                    $scope.NextStep = function () {\r\n                        if ($scope.step == $scope.steps[$scope.steps.length - 1]) {\r\n                            return;\r\n                        }\r\n                        for (var index = 0; index < $scope.steps.length; index++) {\r\n                            if ($scope.step == $scope.steps[index]) {\r\n                                $scope.step = $scope.steps[index + 1];\r\n                                $scope.AcctionStep();\r\n                                return;\r\n                            }\r\n                        }\r\n                    };\r\n                    // education\r\n                    $scope.AddEducation = function () {\r\n                        $scope.Educations.push({\r\n                            University: '',\r\n                            FromYear: '',\r\n                            ToYear: '',\r\n                            Description: '',\r\n                            IdProfile: $scope.ProfileId\r\n                        });\r\n                    };\r\n                    $scope.RemoveEducation = function (index) {\r\n                        $scope.Educations.splice(index, 1);\r\n                    };\r\n                    $scope.SubmitEdus = function () {\r\n                        profileService.SubmitEdus($scope.ProfileId, $scope.Educations)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                logger.log(\"Saved successfully.\");\r\n                                $scope.RebindEdus();\r\n                            }\r\n                        });\r\n                    };\r\n                    $scope.RebindEdus = function () {\r\n                        $scope.Educations = [];\r\n                        profileService.GetEdus($scope.ProfileId)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                $scope.Educations = response.data;\r\n                            }\r\n                        });\r\n                    };\r\n                    // skills\r\n                    $scope.AddSkill = function () {\r\n                        $scope.Skills.push({\r\n                            Name: '',\r\n                            Score: 1,\r\n                            IdProfile: $scope.ProfileId\r\n                        });\r\n                    };\r\n                    $scope.RemoveSkill = function (index) {\r\n                        $scope.Skills.splice(index, 1);\r\n                    };\r\n                    $scope.SubmitSkills = function () {\r\n                        skillService.SubmitSkills($scope.ProfileId, $scope.Skills)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                logger.log(\"Saved successfully.\");\r\n                                $scope.RebindSkills();\r\n                            }\r\n                        });\r\n                    };\r\n                    $scope.RebindSkills = function () {\r\n                        $scope.Skills = [];\r\n                        skillService.GetSkills($scope.ProfileId)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                $scope.Skills = response.data;\r\n                            }\r\n                        });\r\n                    };\r\n                    //work experience\r\n                    $scope.RemoveWorkExp = function (index) {\r\n                        $scope.WorkExps.splice(index, 1);\r\n                    };\r\n                    $scope.AddWorkExp = function () {\r\n                        $scope.WorkExps.push({\r\n                            Company: '',\r\n                            FromMonth: '',\r\n                            FromYear: '',\r\n                            ToMonth: '',\r\n                            ToYear: '',\r\n                            Position: '',\r\n                            Description: '',\r\n                            IdProfile: $scope.ProfileId\r\n                        });\r\n                    };\r\n                    $scope.SubmitWorkExps = function () {\r\n                        workExpService.SubmitWorkExps($scope.ProfileId, $scope.WorkExps)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                logger.log(\"Saved successfully.\");\r\n                                $scope.RebindWorkExps();\r\n                            }\r\n                        });\r\n                    };\r\n                    $scope.RebindWorkExps = function () {\r\n                        $scope.WorkExps = [];\r\n                        workExpService.GetWorkExps($scope.ProfileId)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                $scope.WorkExps = response.data;\r\n                            }\r\n                        });\r\n                    };\r\n                    //reference\r\n                    $scope.RemoveRef = function (index) {\r\n                        $scope.References.splice(index, 1);\r\n                    };\r\n                    $scope.AddRef = function () {\r\n                        $scope.References.push({\r\n                            IdProfile: $scope.ProfileId\r\n                        });\r\n                    };\r\n                    $scope.SubmitRefs = function () {\r\n                        referenceService.SubmitRefs($scope.ProfileId, $scope.References)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                logger.log(\"Saved successfully.\");\r\n                                $scope.RebindRefs();\r\n                            }\r\n                        });\r\n                    };\r\n                    $scope.RebindRefs = function () {\r\n                        $scope.References = [];\r\n                        referenceService.GetRefs($scope.ProfileId)\r\n                            .then(function (response) {\r\n                            if (response.status == 200) {\r\n                                $scope.References = response.data;\r\n                            }\r\n                        });\r\n                    };\r\n                });\r\n            };\r\n            return Profile;\r\n        }());\r\n        Profile.$inject = ['$scope', '$location', 'logger', 'profileService', 'skillService', 'workExpService', 'referenceService', 'uploadService'];\r\n        Controller.Profile = Profile;\r\n    })(Controller = CVGen.Controller || (CVGen.Controller = {}));\r\n})(CVGen || (CVGen = {}));\r\nvar CVGen;\r\n(function (CVGen) {\r\n    var Controller;\r\n    (function (Controller) {\r\n        var Common = (function () {\r\n            function Common() {\r\n            }\r\n            Common.Configure = function (module) {\r\n                module.controller('CommonCtrl', function ($scope) {\r\n                    $scope.ClearClientData = function () {\r\n                        localStorage.clear();\r\n                        window.location.href = \"/\";\r\n                    };\r\n                });\r\n            };\r\n            return Common;\r\n        }());\r\n        Common.$inject = ['$scope'];\r\n        Controller.Common = Common;\r\n    })(Controller = CVGen.Controller || (CVGen.Controller = {}));\r\n})(CVGen || (CVGen = {}));\r\n/// <reference path=\"../references.ts\" />\r\nvar CVGen;\r\n/// <reference path=\"../references.ts\" />\r\n(function (CVGen) {\r\n    var Services;\r\n    (function (Services) {\r\n        var ProfileService = (function () {\r\n            function ProfileService($http) {\r\n                var _this = this;\r\n                this.SubmitProfile = function (profileModel) {\r\n                    return _this.httpService({\r\n                        data: profileModel,\r\n                        method: 'POST',\r\n                        url: \"/api/Profile/SubmitProfile\",\r\n                    });\r\n                };\r\n                this.GetProfile = function (idProfile) {\r\n                    var params = { idProfile: idProfile };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        method: 'GET',\r\n                        url: \"/api/Profile/GetUserProfile\",\r\n                    });\r\n                };\r\n                this.SubmitPersonalInfo = function (model) {\r\n                    return _this.httpService({\r\n                        data: model,\r\n                        method: 'POST',\r\n                        url: \"/api/Profile/SubmitPersonalInfo\",\r\n                    });\r\n                };\r\n                this.SubmitEdus = function (profileId, model) {\r\n                    var params = { profileId: profileId };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        data: model,\r\n                        method: 'POST',\r\n                        url: \"/api/Edu/SubmitEdus\",\r\n                    });\r\n                };\r\n                this.GetEdus = function (idProfile) {\r\n                    var params = { idProfile: idProfile };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        method: 'GET',\r\n                        url: \"/api/Edu/GetEdus\",\r\n                    });\r\n                };\r\n                this.httpService = $http;\r\n            }\r\n            return ProfileService;\r\n        }());\r\n        ProfileService.$inject = [\"$http\"];\r\n        Services.ProfileService = ProfileService;\r\n    })(Services = CVGen.Services || (CVGen.Services = {}));\r\n})(CVGen || (CVGen = {}));\r\n/// <reference path=\"../references.ts\" />\r\nvar CVGen;\r\n/// <reference path=\"../references.ts\" />\r\n(function (CVGen) {\r\n    var Services;\r\n    (function (Services) {\r\n        var TemplateService = (function () {\r\n            function TemplateService($http) {\r\n                var _this = this;\r\n                this.GetAll = function () {\r\n                    return _this.httpService({\r\n                        method: 'GET',\r\n                        url: \"/api/Template/GetAll\",\r\n                    });\r\n                };\r\n                this.httpService = $http;\r\n            }\r\n            return TemplateService;\r\n        }());\r\n        TemplateService.$inject = [\"$http\"];\r\n        Services.TemplateService = TemplateService;\r\n    })(Services = CVGen.Services || (CVGen.Services = {}));\r\n})(CVGen || (CVGen = {}));\r\n/// <reference path=\"../references.ts\" />\r\nvar CVGen;\r\n/// <reference path=\"../references.ts\" />\r\n(function (CVGen) {\r\n    var Services;\r\n    (function (Services) {\r\n        var SkillService = (function () {\r\n            function SkillService($http) {\r\n                var _this = this;\r\n                this.SubmitSkills = function (profileId, model) {\r\n                    var params = { profileId: profileId };\r\n                    return _this.httpService({\r\n                        data: model,\r\n                        params: params,\r\n                        method: 'POST',\r\n                        url: \"/api/Skill/SubmitSkills\",\r\n                    });\r\n                };\r\n                this.GetSkills = function (idProfile) {\r\n                    var params = { idProfile: idProfile };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        method: 'GET',\r\n                        url: \"/api/skill/GetSkills\",\r\n                    });\r\n                };\r\n                this.httpService = $http;\r\n            }\r\n            return SkillService;\r\n        }());\r\n        SkillService.$inject = [\"$http\"];\r\n        Services.SkillService = SkillService;\r\n    })(Services = CVGen.Services || (CVGen.Services = {}));\r\n})(CVGen || (CVGen = {}));\r\n/// <reference path=\"../references.ts\" />\r\nvar CVGen;\r\n/// <reference path=\"../references.ts\" />\r\n(function (CVGen) {\r\n    var Services;\r\n    (function (Services) {\r\n        var WorkExpService = (function () {\r\n            function WorkExpService($http) {\r\n                var _this = this;\r\n                this.SubmitWorkExps = function (profileId, model) {\r\n                    var params = { profileId: profileId };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        data: model,\r\n                        method: 'POST',\r\n                        url: \"/api/WorkExp/SubmitWorkExps\",\r\n                    });\r\n                };\r\n                this.GetWorkExps = function (idProfile) {\r\n                    var params = { idProfile: idProfile };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        method: 'GET',\r\n                        url: \"/api/WorkExp/GetWorkExps\",\r\n                    });\r\n                };\r\n                this.httpService = $http;\r\n            }\r\n            return WorkExpService;\r\n        }());\r\n        WorkExpService.$inject = [\"$http\"];\r\n        Services.WorkExpService = WorkExpService;\r\n    })(Services = CVGen.Services || (CVGen.Services = {}));\r\n})(CVGen || (CVGen = {}));\r\n/// <reference path=\"../references.ts\" />\r\nvar CVGen;\r\n/// <reference path=\"../references.ts\" />\r\n(function (CVGen) {\r\n    var Services;\r\n    (function (Services) {\r\n        var ReferenceService = (function () {\r\n            function ReferenceService($http) {\r\n                var _this = this;\r\n                this.SubmitRefs = function (profileId, model) {\r\n                    var params = { profileId: profileId };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        data: model,\r\n                        method: 'POST',\r\n                        url: \"/api/ref/SubmitRefs\",\r\n                    });\r\n                };\r\n                this.GetRefs = function (idProfile) {\r\n                    var params = { idProfile: idProfile };\r\n                    return _this.httpService({\r\n                        params: params,\r\n                        method: 'GET',\r\n                        url: \"/api/ref/GetRefs\",\r\n                    });\r\n                };\r\n                this.httpService = $http;\r\n            }\r\n            return ReferenceService;\r\n        }());\r\n        ReferenceService.$inject = [\"$http\"];\r\n        Services.ReferenceService = ReferenceService;\r\n    })(Services = CVGen.Services || (CVGen.Services = {}));\r\n})(CVGen || (CVGen = {}));\r\n/// <reference path=\"../references.ts\" />\r\nvar CVGen;\r\n/// <reference path=\"../references.ts\" />\r\n(function (CVGen) {\r\n    var Services;\r\n    (function (Services) {\r\n        var UploadService = (function () {\r\n            function UploadService($http) {\r\n                var _this = this;\r\n                this.CvPhoto = function (imageString64) {\r\n                    var model = { Content: imageString64 };\r\n                    return _this.httpService({\r\n                        data: model,\r\n                        method: 'POST',\r\n                        url: \"/api/upload/CvPhoto\",\r\n                    });\r\n                };\r\n                this.httpService = $http;\r\n            }\r\n            return UploadService;\r\n        }());\r\n        UploadService.$inject = [\"$http\"];\r\n        Services.UploadService = UploadService;\r\n    })(Services = CVGen.Services || (CVGen.Services = {}));\r\n})(CVGen || (CVGen = {}));\r\n/// <reference path=\"../Scripts/typings/angularjs/angular.d.ts\" />\r\n/// <reference path=\"../Scripts/typings/toastr/toastr.d.ts\" />\r\n/// <reference path=\"base.ts\" />\r\n/// <reference path=\"controllers/app.module.home.ts\" />\r\n/// <reference path=\"controllers/app.module.resume.ts\" />\r\n/// <reference path=\"controllers/app.module.userResume.ts\" />\r\n/// <reference path=\"controllers/app.module.profile.ts\" />\r\n/// <reference path=\"controllers/app.module.common.ts\" />\r\n/// <reference path=\"services/profileService.ts\" />\r\n/// <reference path=\"services/templateService.ts\" />\r\n/// <reference path=\"services/skillService.ts\" />\r\n/// <reference path=\"services/workExpService.ts\" />\r\n/// <reference path=\"services/referenceService.ts\" />\r\n/// <reference path=\"services/uploadService.ts\" /> \r\n(function () {\r\n    var cvGeneratorApp = angular.module(\"cvGeneratorApp\", ['uiCropper']);\r\n    cvGeneratorApp.factory('httpInterceptor', ['logger', function (_) { return httpInterceptor(_); }]);\r\n    cvGeneratorApp.config(['$httpProvider', function ($httpProvider) {\r\n            $httpProvider.interceptors.push('httpInterceptor');\r\n        }]);\r\n    function httpInterceptor(logger) {\r\n        return {\r\n            request: function (config) {\r\n                //config.headers['Authorization'] = \"Bearer \" + CVGen.Base.UserToken;\r\n                config.headers.Authorization = CVGen.Base.Const.USER_TOKEN;\r\n                return config;\r\n            },\r\n            response: function (res) {\r\n                if (res.status != 200) {\r\n                    logger.logWarning(\"ERROR CODE \" + res.status);\r\n                }\r\n                return res;\r\n            },\r\n            responseError: function (res) {\r\n                switch (res.status) {\r\n                    default:\r\n                        debugger;\r\n                        logger.logError(\"# RESPONSE ERROR STATUS CODE \" + res.status);\r\n                        break;\r\n                }\r\n                return res;\r\n            }\r\n        };\r\n    }\r\n    cvGeneratorApp.config(function ($locationProvider) {\r\n        //$locationProvider.html5Mode({\r\n        //    enabled: true,\r\n        //    requireBase: false\r\n        //});\r\n        //$locationProvider.hashPrefix(\"\");\r\n    });\r\n    cvGeneratorApp.service(\"profileService\", CVGen.Services.ProfileService);\r\n    cvGeneratorApp.service(\"skillService\", CVGen.Services.SkillService);\r\n    cvGeneratorApp.service(\"templateService\", CVGen.Services.TemplateService);\r\n    cvGeneratorApp.service(\"workExpService\", CVGen.Services.WorkExpService);\r\n    cvGeneratorApp.service(\"referenceService\", CVGen.Services.ReferenceService);\r\n    cvGeneratorApp.service(\"uploadService\", CVGen.Services.UploadService);\r\n    CVGen.Controller.Home.Configure(cvGeneratorApp);\r\n    CVGen.Controller.Resume.Configure(cvGeneratorApp);\r\n    CVGen.Controller.Profile.Configure(cvGeneratorApp);\r\n    CVGen.Controller.UserResume.Configure(cvGeneratorApp);\r\n    CVGen.Controller.Common.Configure(cvGeneratorApp);\r\n    cvGeneratorApp.config(function () {\r\n        if (CVGen.Base.Const.USER_TOKEN == null || CVGen.Base.Const.USER_TOKEN == '') {\r\n            CVGen.Base.Const.USER_TOKEN = localStorage.getItem(\"tk\");\r\n        }\r\n        else {\r\n            localStorage.setItem(\"tk\", CVGen.Base.Const.USER_TOKEN);\r\n        }\r\n    });\r\n    cvGeneratorApp.factory(\"logger\", [\r\n        function () {\r\n            var logIt;\r\n            return toastr.options = {\r\n                closeButton: !0,\r\n                positionClass: \"toast-bottom-right\",\r\n                timeOut: 3000\r\n            }, logIt = function (message, type) {\r\n                return toastr[type](message);\r\n            }, {\r\n                log: function (message) {\r\n                    logIt(message, \"info\");\r\n                },\r\n                logWarning: function (message) {\r\n                    logIt(message, \"warning\");\r\n                },\r\n                logSuccess: function (message) {\r\n                    logIt(message, \"success\");\r\n                },\r\n                logError: function (message) {\r\n                    logIt(message, \"error\");\r\n                }\r\n            };\r\n        }\r\n    ]);\r\n    cvGeneratorApp.directive('sgNumberInput', ['$filter', '$locale', function ($filter, $locale) {\r\n            return {\r\n                require: 'ngModel',\r\n                restrict: \"A\",\r\n                link: function ($scope, element, attrs, ctrl) {\r\n                    var fractionSize = parseInt(attrs['fractionSize']) || 0;\r\n                    var numberFilter = $filter('number');\r\n                    //format the view value\r\n                    ctrl.$formatters.push(function (modelValue) {\r\n                        var retVal = numberFilter(modelValue, fractionSize);\r\n                        var isValid = isNaN(modelValue) == false;\r\n                        ctrl.$setValidity(attrs.name, isValid);\r\n                        return retVal;\r\n                    });\r\n                    //parse user's input\r\n                    ctrl.$parsers.push(function (viewValue) {\r\n                        var caretPosition = getCaretPosition(element[0]), nonNumericCount = countNonNumericChars(viewValue);\r\n                        viewValue = viewValue || '';\r\n                        //Replace all possible group separators\r\n                        var trimmedValue = viewValue.trim().replace(/,/g, '').replace(/`/g, '').replace(/'/g, '').replace(/\\u00a0/g, '').replace(/ /g, '');\r\n                        //If numericValue contains more decimal places than is allowed by fractionSize, then numberFilter would round the value up\r\n                        //Thus 123.109 would become 123.11\r\n                        //We do not want that, therefore I strip the extra decimal numbers\r\n                        var separator = $locale.NUMBER_FORMATS.DECIMAL_SEP;\r\n                        var arr = trimmedValue.split(separator);\r\n                        var decimalPlaces = arr[1];\r\n                        if (decimalPlaces != null && decimalPlaces.length > fractionSize) {\r\n                            //Trim extra decimal places\r\n                            decimalPlaces = decimalPlaces.substring(0, fractionSize);\r\n                            trimmedValue = arr[0] + separator + decimalPlaces;\r\n                        }\r\n                        var numericValue = parseFloat(trimmedValue);\r\n                        var isEmpty = numericValue == null || viewValue.trim() === \"\";\r\n                        var isRequired = attrs.required || false;\r\n                        var isValid = true;\r\n                        if (isEmpty && isRequired) {\r\n                            isValid = false;\r\n                        }\r\n                        if (isEmpty == false && isNaN(numericValue)) {\r\n                            isValid = false;\r\n                        }\r\n                        ctrl.$setValidity(attrs.name, isValid);\r\n                        if (isNaN(numericValue) == false && isValid) {\r\n                            var newViewValue = numberFilter(numericValue, fractionSize);\r\n                            element.val(newViewValue);\r\n                            var newNonNumbericCount = countNonNumericChars(newViewValue);\r\n                            var diff = newNonNumbericCount - nonNumericCount;\r\n                            var newCaretPosition = caretPosition + diff;\r\n                            if (nonNumericCount == 0 && newCaretPosition > 0) {\r\n                                if (fractionSize > 0) {\r\n                                    newCaretPosition--;\r\n                                }\r\n                            }\r\n                            setCaretPosition(element[0], newCaretPosition);\r\n                        }\r\n                        return isNaN(numericValue) == false ? numericValue : null;\r\n                    });\r\n                } //end of link function\r\n            };\r\n            //#region helper methods\r\n            function getCaretPosition(inputField) {\r\n                // Initialize\r\n                var position = 0;\r\n                // IE Support\r\n                //if (document.selection) {\r\n                //    inputField.focus();\r\n                //    // To get cursor position, get empty selection range\r\n                //    var emptySelection = document.selection.createRange();\r\n                //    // Move selection start to 0 position\r\n                //    emptySelection.moveStart('character', -inputField.value.length);\r\n                //    // The caret position is selection length\r\n                //    position = emptySelection.text.length;\r\n                //}\r\n                //else\r\n                if (inputField.selectionStart || inputField.selectionStart == 0) {\r\n                    position = inputField.selectionStart;\r\n                }\r\n                return position;\r\n            }\r\n            function setCaretPosition(inputElement, position) {\r\n                if (inputElement.createTextRange) {\r\n                    var range = inputElement.createTextRange();\r\n                    range.move('character', position);\r\n                    range.select();\r\n                }\r\n                else {\r\n                    if (inputElement.selectionStart) {\r\n                        inputElement.focus();\r\n                        inputElement.setSelectionRange(position, position);\r\n                    }\r\n                    else {\r\n                        inputElement.focus();\r\n                    }\r\n                }\r\n            }\r\n            function countNonNumericChars(value) {\r\n                return (value.match(/[^a-z0-9]/gi) || []).length;\r\n            }\r\n            //#endregion helper methods\r\n        }]);\r\n    //valid-number\r\n    cvGeneratorApp.directive('validNumber', function () {\r\n        return {\r\n            require: '?ngModel',\r\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                if (!ngModelCtrl) {\r\n                    return;\r\n                }\r\n                ngModelCtrl.$parsers.push(function (val) {\r\n                    if (angular.isUndefined(val)) {\r\n                        var val = '';\r\n                    }\r\n                    var clean = val.replace(/[^-0-9\\.\\,]/g, '');\r\n                    var negativeCheck = clean.split('-');\r\n                    var decimalCheck = clean.split('.');\r\n                    if (!angular.isUndefined(negativeCheck[1])) {\r\n                        negativeCheck[1] = negativeCheck[1].slice(0, negativeCheck[1].length);\r\n                        clean = negativeCheck[0] + '-' + negativeCheck[1];\r\n                        if (negativeCheck[0].length > 0) {\r\n                            clean = negativeCheck[0];\r\n                        }\r\n                    }\r\n                    if (!angular.isUndefined(decimalCheck[1])) {\r\n                        decimalCheck[1] = decimalCheck[1].slice(0, 2);\r\n                        clean = decimalCheck[0] + '.' + decimalCheck[1];\r\n                    }\r\n                    if (val !== clean) {\r\n                        ngModelCtrl.$setViewValue(clean);\r\n                        ngModelCtrl.$render();\r\n                    }\r\n                    return clean;\r\n                });\r\n                element.bind('keypress', function (event) {\r\n                    if (event.keyCode === 32) {\r\n                        event.preventDefault();\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    });\r\n})();\r\n"
    }
  ],
  "filteredModules": 0,
  "children": []
}
